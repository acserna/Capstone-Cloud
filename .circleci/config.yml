version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

parameters:
  cluster-name:
    type: string
    default: "Udacity-ACSR"

jobs:
  lint-app:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-env-{{ checksum "requirements.txt" }}
            - v1-env-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            
      - save_cache:
          paths:
            - ./venv
          key: v1-env-{{ checksum "requirements.txt" }}

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-container:
    machine: true
    working_directory: ~/app
    #docker:
    #  - image: circleci/golang:1.15
    #    auth:
    #      username: $DOCKER_USER
    #      password: $DOCKER_PASS  # context / project UI env-var reference
    steps:
      - checkout
      #- setup_remote_docker:
      #    version: 19.03.13
      #    docker_layer_caching: false
      - run: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

          docker build -t andrecamilosr/gsvcapstone:${CIRCLE_WORKFLOW_ID:0:7} .
          docker push andrecamilosr/gsvcapstone:${CIRCLE_WORKFLOW_ID:0:7}
          docker tag andrecamilosr/gsvcapstone:${CIRCLE_WORKFLOW_ID:0:7} andrecamilosr/gsvcapstone:latest
          docker push andrecamilosr/gsvcapstone:latest

  create-eks-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: << pipeline.parameters.cluster-name >>
          aws-region: us-west-2
          node-type: t2.medium
          #nodes: 1

  create-or-update-eks-deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true

      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deploy.yml
          resource-name: deployment/gsvcapstone

      #- kubernetes/create-or-update-resource:
      #    get-rollout-status: false
      #    resource-file-path: blue-controller.json
      #- kubernetes/create-or-update-resource:
      #     get-rollout-status: false
      #     resource-file-path: green-controller.json
      #- kubernetes/create-or-update-resource:
      #    get-rollout-status: false
      #    resource-file-path: blue-green-service.json
      #- run:
      #    name: Check the Resources
      #    command: |
      #      kubectl get services
      #      kubectl get pods
      #      kubectl get deploy,po -o wide
      #      kubectl get nodes -o wide

  test-cluster:
    executor: aws-eks/python3
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
      - run:
          name: testing cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get pods
            kubectl get deployment

  delete-eks-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/delete-cluster:
          cluster-name: << pipeline.parameters.cluster-name >>

workflows:
  default:
     jobs:
       #- lint-app
       #- build-container:
       #    requires: [lint-app]
       #- create-eks-cluster:
       #    requires: [build-container]
       #- create-eks-cluster
       #- create-or-update-eks-deployment:
       #    requires: [create-eks-cluster]

       - delete-eks-cluster
       